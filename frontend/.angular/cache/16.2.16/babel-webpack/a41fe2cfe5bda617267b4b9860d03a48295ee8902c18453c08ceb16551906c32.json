{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { loadOrders, loadOrdersFailure, loadOrdersSuccess } from './orders.actions';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../../core/services/orders.service\";\nexport class OrdersEffects {\n  actions$;\n  ordersService;\n  // Add @Effect decorator if using NgRx < 15\n  loadOrders$ = createEffect(() => this.actions$.pipe(ofType(loadOrders), mergeMap(() => this.ordersService.getOrders().pipe(map(orders => loadOrdersSuccess({\n    orders\n  })), catchError(error => of(loadOrdersFailure({\n    error: error.message\n  })))))));\n  constructor(actions$, ordersService) {\n    this.actions$ = actions$;\n    this.ordersService = ordersService;\n  }\n  static ɵfac = function OrdersEffects_Factory(t) {\n    return new (t || OrdersEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.OrdersService));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrdersEffects,\n    factory: OrdersEffects.ɵfac\n  });\n}","map":{"version":3,"names":["createEffect","ofType","catchError","map","mergeMap","loadOrders","loadOrdersFailure","loadOrdersSuccess","of","OrdersEffects","actions$","ordersService","loadOrders$","pipe","getOrders","orders","error","message","constructor","i0","ɵɵinject","i1","Actions","i2","OrdersService","factory","ɵfac"],"sources":["/home/tiagoadp/TRABALHO/personal/curotec/frontend/src/app/features/orders/state/orders.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { OrdersService } from '../../../core/services/orders.service';\nimport { loadOrders, loadOrdersFailure, loadOrdersSuccess } from './orders.actions';\nimport { Order } from 'src/app/core/models/order.model';\nimport { of } from 'rxjs';\n\n@Injectable()\nexport class OrdersEffects {\n  // Add @Effect decorator if using NgRx < 15\n  loadOrders$ = createEffect(() => this.actions$.pipe(\n    ofType(loadOrders),\n    mergeMap(() => this.ordersService.getOrders().pipe(\n      map((orders: Order[]) => loadOrdersSuccess({ orders })),\n      catchError(error => of(loadOrdersFailure({ error: error.message })))\n    ))\n  ));\n\n  constructor(\n    private actions$: Actions,\n    private ordersService: OrdersService\n  ) {}\n}"],"mappings":"AACA,SAAkBA,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SAASC,UAAU,EAAEC,GAAG,EAAEC,QAAQ,QAAQ,gBAAgB;AAE1D,SAASC,UAAU,EAAEC,iBAAiB,EAAEC,iBAAiB,QAAQ,kBAAkB;AAEnF,SAASC,EAAE,QAAQ,MAAM;;;;AAGzB,OAAM,MAAOC,aAAa;EAWdC,QAAA;EACAC,aAAA;EAXV;EACAC,WAAW,GAAGZ,YAAY,CAAC,MAAM,IAAI,CAACU,QAAQ,CAACG,IAAI,CACjDZ,MAAM,CAACI,UAAU,CAAC,EAClBD,QAAQ,CAAC,MAAM,IAAI,CAACO,aAAa,CAACG,SAAS,EAAE,CAACD,IAAI,CAChDV,GAAG,CAAEY,MAAe,IAAKR,iBAAiB,CAAC;IAAEQ;EAAM,CAAE,CAAC,CAAC,EACvDb,UAAU,CAACc,KAAK,IAAIR,EAAE,CAACF,iBAAiB,CAAC;IAAEU,KAAK,EAAEA,KAAK,CAACC;EAAO,CAAE,CAAC,CAAC,CAAC,CACrE,CAAC,CACH,CAAC;EAEFC,YACUR,QAAiB,EACjBC,aAA4B;IAD5B,KAAAD,QAAQ,GAARA,QAAQ;IACR,KAAAC,aAAa,GAAbA,aAAa;EACpB;;qBAbQF,aAAa,EAAAU,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,OAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,aAAA;EAAA;;WAAbf,aAAa;IAAAgB,OAAA,EAAbhB,aAAa,CAAAiB;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}