{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  http;\n  currentUserSubject = new BehaviorSubject(null);\n  currentUser = this.currentUserSubject.asObservable();\n  constructor(http) {\n    this.http = http;\n  }\n  login(email, password) {\n    return this.http.post(`${environment.api.customers}/api/auth/login`, {\n      email,\n      password\n    }).pipe(tap(res => this.storeToken(res.token)));\n  }\n  storeToken(token) {\n    localStorage.setItem('jwt', token);\n    this.decodeToken(token);\n  }\n  decodeToken(token) {\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    this.currentUserSubject.next(payload);\n  }\n  logout() {\n    localStorage.removeItem('jwt');\n    this.currentUserSubject.next(null);\n  }\n  get token() {\n    return localStorage.getItem('jwt');\n  }\n  isAuthenticated() {\n    return !!this.token && !this.isTokenExpired();\n  }\n  isTokenExpired() {\n    const token = this.token;\n    if (!token) return true;\n    const expiry = JSON.parse(atob(token.split('.')[1])).exp;\n    return Math.floor(new Date().getTime() / 1000) >= expiry;\n  }\n  get currentUserValue() {\n    return this.currentUserSubject.value;\n  }\n  get currentUserId() {\n    return this.currentUserValue?.id || null;\n  }\n  static ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","tap","environment","AuthService","http","currentUserSubject","currentUser","asObservable","constructor","login","email","password","post","api","customers","pipe","res","storeToken","token","localStorage","setItem","decodeToken","payload","JSON","parse","atob","split","next","logout","removeItem","getItem","isAuthenticated","isTokenExpired","expiry","exp","Math","floor","Date","getTime","currentUserValue","value","currentUserId","id","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/tiagoadp/TRABALHO/personal/curotec/frontend/src/app/core/auth/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\nimport { environment } from '../../../environments/environment';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n  private currentUserSubject = new BehaviorSubject<any>(null);\n  public currentUser = this.currentUserSubject.asObservable();\n\n  constructor(private http: HttpClient) {}\n\n  login(email: string, password: string): Observable<{ token: string }> {\n    return this.http.post<{ token: string }>(`${environment.api.customers}/api/auth/login`, { email, password })\n      .pipe(tap(res => this.storeToken(res.token)));\n  }\n\n  private storeToken(token: string): void {\n    localStorage.setItem('jwt', token);\n    this.decodeToken(token);\n  }\n\n  private decodeToken(token: string): void {\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    this.currentUserSubject.next(payload);\n  }\n\n  logout(): void {\n    localStorage.removeItem('jwt');\n    this.currentUserSubject.next(null);\n  }\n\n  get token(): string | null {\n    return localStorage.getItem('jwt');\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.token && !this.isTokenExpired();\n  }\n\n  private isTokenExpired(): boolean {\n    const token = this.token;\n    if (!token) return true;\n    \n    const expiry = (JSON.parse(atob(token.split('.')[1]))).exp;\n    return (Math.floor((new Date).getTime() / 1000)) >= expiry;\n  }\n\n  get currentUserValue(): any {\n    return this.currentUserSubject.value;\n  }\n\n  get currentUserId(): number | null {\n    return this.currentUserValue?.id || null;\n  }\n}\n"],"mappings":"AAEA,SAASA,eAAe,EAAcC,GAAG,QAAQ,MAAM;AACvD,SAASC,WAAW,QAAQ,mCAAmC;;;AAG/D,OAAM,MAAOC,WAAW;EAIFC,IAAA;EAHZC,kBAAkB,GAAG,IAAIL,eAAe,CAAM,IAAI,CAAC;EACpDM,WAAW,GAAG,IAAI,CAACD,kBAAkB,CAACE,YAAY,EAAE;EAE3DC,YAAoBJ,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEvCK,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAoB,GAAGV,WAAW,CAACW,GAAG,CAACC,SAAS,iBAAiB,EAAE;MAAEJ,KAAK;MAAEC;IAAQ,CAAE,CAAC,CACzGI,IAAI,CAACd,GAAG,CAACe,GAAG,IAAI,IAAI,CAACC,UAAU,CAACD,GAAG,CAACE,KAAK,CAAC,CAAC,CAAC;EACjD;EAEQD,UAAUA,CAACC,KAAa;IAC9BC,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEF,KAAK,CAAC;IAClC,IAAI,CAACG,WAAW,CAACH,KAAK,CAAC;EACzB;EAEQG,WAAWA,CAACH,KAAa;IAC/B,MAAMI,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACP,KAAK,CAACQ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrD,IAAI,CAACrB,kBAAkB,CAACsB,IAAI,CAACL,OAAO,CAAC;EACvC;EAEAM,MAAMA,CAAA;IACJT,YAAY,CAACU,UAAU,CAAC,KAAK,CAAC;IAC9B,IAAI,CAACxB,kBAAkB,CAACsB,IAAI,CAAC,IAAI,CAAC;EACpC;EAEA,IAAIT,KAAKA,CAAA;IACP,OAAOC,YAAY,CAACW,OAAO,CAAC,KAAK,CAAC;EACpC;EAEAC,eAAeA,CAAA;IACb,OAAO,CAAC,CAAC,IAAI,CAACb,KAAK,IAAI,CAAC,IAAI,CAACc,cAAc,EAAE;EAC/C;EAEQA,cAAcA,CAAA;IACpB,MAAMd,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,IAAI,CAACA,KAAK,EAAE,OAAO,IAAI;IAEvB,MAAMe,MAAM,GAAIV,IAAI,CAACC,KAAK,CAACC,IAAI,CAACP,KAAK,CAACQ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAEQ,GAAG;IAC1D,OAAQC,IAAI,CAACC,KAAK,CAAE,IAAIC,IAAI,CAAJ,CAAI,CAAEC,OAAO,EAAE,GAAG,IAAI,CAAC,IAAKL,MAAM;EAC5D;EAEA,IAAIM,gBAAgBA,CAAA;IAClB,OAAO,IAAI,CAAClC,kBAAkB,CAACmC,KAAK;EACtC;EAEA,IAAIC,aAAaA,CAAA;IACf,OAAO,IAAI,CAACF,gBAAgB,EAAEG,EAAE,IAAI,IAAI;EAC1C;;qBAhDWvC,WAAW,EAAAwC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;;WAAX3C,WAAW;IAAA4C,OAAA,EAAX5C,WAAW,CAAA6C,IAAA;IAAAC,UAAA,EADE;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}