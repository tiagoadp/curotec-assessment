{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    http;\n    currentUserSubject = new BehaviorSubject(null);\n    currentUser = this.currentUserSubject.asObservable();\n    constructor(http) {\n      this.http = http;\n    }\n    login(email, password) {\n      return this.http.post(`${environment.api.customers}/api/auth/login`, {\n        email,\n        password\n      }).pipe(tap(res => this.storeToken(res.token)));\n    }\n    storeToken(token) {\n      localStorage.setItem('jwt', token);\n      this.decodeToken(token);\n    }\n    decodeToken(token) {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      this.currentUserSubject.next(payload);\n    }\n    logout() {\n      localStorage.removeItem('jwt');\n      this.currentUserSubject.next(null);\n    }\n    get token() {\n      return localStorage.getItem('jwt');\n    }\n    isAuthenticated() {\n      return !!this.token && !this.isTokenExpired();\n    }\n    isTokenExpired() {\n      const token = this.token;\n      if (!token) return true;\n      const expiry = JSON.parse(atob(token.split('.')[1])).exp;\n      return Math.floor(new Date().getTime() / 1000) >= expiry;\n    }\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n    static ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}