{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { loadProducts, loadProductsFailure, loadProductsSuccess } from './products.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../../core/services/products.service\";\nexport class ProductsEffects {\n  actions$;\n  productsService;\n  loadProducts$ = createEffect(() => this.actions$.pipe(ofType(loadProducts), mergeMap(() => this.productsService.getProducts().pipe(map(products => loadProductsSuccess({\n    products\n  })), catchError(error => [loadProductsFailure({\n    error: error.message\n  })])))));\n  constructor(actions$, productsService) {\n    this.actions$ = actions$;\n    this.productsService = productsService;\n  }\n  static ɵfac = function ProductsEffects_Factory(t) {\n    return new (t || ProductsEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.ProductsService));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductsEffects,\n    factory: ProductsEffects.ɵfac\n  });\n}","map":{"version":3,"names":["createEffect","ofType","catchError","map","mergeMap","loadProducts","loadProductsFailure","loadProductsSuccess","ProductsEffects","actions$","productsService","loadProducts$","pipe","getProducts","products","error","message","constructor","i0","ɵɵinject","i1","Actions","i2","ProductsService","factory","ɵfac"],"sources":["/home/tiagoadp/TRABALHO/personal/curotec/frontend/src/app/features/products/state/products.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { ProductsService } from '../../../core/services/products.service';\nimport { loadProducts, loadProductsFailure, loadProductsSuccess } from './products.actions';\n\n@Injectable()\nexport class ProductsEffects {\n  loadProducts$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadProducts),\n      mergeMap(() =>\n        this.productsService.getProducts().pipe(\n          map(products => loadProductsSuccess({ products })),\n          catchError(error => [loadProductsFailure({ error: error.message })])\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productsService: ProductsService\n  ) {}\n}\n"],"mappings":"AACA,SAAkBA,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SAASC,UAAU,EAAEC,GAAG,EAAEC,QAAQ,QAAQ,gBAAgB;AAE1D,SAASC,YAAY,EAAEC,mBAAmB,EAAEC,mBAAmB,QAAQ,oBAAoB;;;;AAG3F,OAAM,MAAOC,eAAe;EAchBC,QAAA;EACAC,eAAA;EAdVC,aAAa,GAAGX,YAAY,CAAC,MAC3B,IAAI,CAACS,QAAQ,CAACG,IAAI,CAChBX,MAAM,CAACI,YAAY,CAAC,EACpBD,QAAQ,CAAC,MACP,IAAI,CAACM,eAAe,CAACG,WAAW,EAAE,CAACD,IAAI,CACrCT,GAAG,CAACW,QAAQ,IAAIP,mBAAmB,CAAC;IAAEO;EAAQ,CAAE,CAAC,CAAC,EAClDZ,UAAU,CAACa,KAAK,IAAI,CAACT,mBAAmB,CAAC;IAAES,KAAK,EAAEA,KAAK,CAACC;EAAO,CAAE,CAAC,CAAC,CAAC,CACrE,CACF,CACF,CACF;EAEDC,YACUR,QAAiB,EACjBC,eAAgC;IADhC,KAAAD,QAAQ,GAARA,QAAQ;IACR,KAAAC,eAAe,GAAfA,eAAe;EACtB;;qBAhBQF,eAAe,EAAAU,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,OAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,eAAA;EAAA;;WAAff,eAAe;IAAAgB,OAAA,EAAfhB,eAAe,CAAAiB;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}