{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { loadProducts, loadProductsFailure, loadProductsSuccess } from './products.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../../core/services/products.service\";\nexport let ProductsEffects = /*#__PURE__*/(() => {\n  class ProductsEffects {\n    actions$;\n    productsService;\n    loadProducts$ = createEffect(() => this.actions$.pipe(ofType(loadProducts), mergeMap(() => this.productsService.getProducts().pipe(map(products => loadProductsSuccess({\n      products\n    })), catchError(error => [loadProductsFailure({\n      error: error.message\n    })])))));\n    constructor(actions$, productsService) {\n      this.actions$ = actions$;\n      this.productsService = productsService;\n    }\n    static ɵfac = function ProductsEffects_Factory(t) {\n      return new (t || ProductsEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.ProductsService));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProductsEffects,\n      factory: ProductsEffects.ɵfac\n    });\n  }\n  return ProductsEffects;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}